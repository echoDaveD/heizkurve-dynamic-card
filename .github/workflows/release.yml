name: Auto Tag + Release (JS asset + optional ZIP)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get last tag
        id: lasttag
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            echo "last_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "last_tag=v0.0.0" >> $GITHUB_OUTPUT
          fi
          echo "Last tag: ${{ steps.lasttag.outputs.last_tag }}"

      - name: Collect commits since last tag
        id: commits
        run: |
          LAST="${{ steps.lasttag.outputs.last_tag }}"
          RANGE=""
          if [ "$LAST" != "v0.0.0" ]; then RANGE="${LAST}..HEAD"; fi
          LOG=$(git log --pretty=format:"- %s (%h) by %an" $RANGE || true)
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "${LOG}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          COMMITS=$(git log --pretty=format:"%s%n%b" $RANGE || true)
          BUMP="patch"
          if echo "$COMMITS" | grep -Eiq "BREAKING CHANGE|!:"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eiq "^feat(\(.+\))?: "; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -Eiq "^fix(\(.+\))?: "; then
            BUMP="patch"
          fi
          echo "bump=$BUMP" >> $GITHUB_OUTPUT
          echo "Chosen bump: $BUMP"

      - name: Compute next tag
        id: nexttag
        run: |
          LAST="${{ steps.lasttag.outputs.last_tag }}"
          BUMP="${{ steps.commits.outputs.bump }}"
          CORE="${LAST#v}"
          IFS='.' read -r MA MI PA <<< "$CORE"
          MA=${MA:-0}; MI=${MI:-0}; PA=${PA:-0}
          case "$BUMP" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch) PA=$((PA+1)) ;;
          esac
          echo "next_tag=v${MA}.${MI}.${PA}" >> $GITHUB_OUTPUT
          echo "Next tag: v${MA}.${MI}.${PA}"

      - name: Create/Push tag
        run: |
          TAG="${{ steps.nexttag.outputs.next_tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists already."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Prepare assets
        run: |
          set -euo pipefail
          JS_SRC="frontend/heizkurve-dynamic-card.js"    # ggf. anpassen
          JS_DST="heizkurve-dynamic-card.js"
          test -f "$JS_SRC" || (echo "❌ Datei $JS_SRC nicht gefunden" && exit 1)
          cp "$JS_SRC" "$JS_DST"
          mkdir -p bundle && cp "$JS_SRC" "bundle/$JS_DST" && (cd bundle && zip -9 "../heizkurve-dynamic-card-${{ steps.nexttag.outputs.next_tag }}.zip" * )

      - name: Create GitHub Release (upload JS + ZIP)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.nexttag.outputs.next_tag }}
          name: ${{ steps.nexttag.outputs.next_tag }}
          draft: false
          prerelease: false
          files: |
            heizkurve-dynamic-card.js
            heizkurve-dynamic-card-${{ steps.nexttag.outputs.next_tag }}.zip
          body: |
            ## Heizkurve Dynamic Card – ${{ steps.nexttag.outputs.next_tag }}

            **Änderungen seit ${{ steps.lasttag.outputs.last_tag }}:**
            ${{ steps.commits.outputs.log }}

            _Assets:_
            - `heizkurve-dynamic-card.js` (für HACS)
            - `heizkurve-dynamic-card-${{ steps.nexttag.outputs.next_tag }}.zip` (optional)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
